openapi: 3.1.0
info:
  title: Skyfire API
  version: "1.0.0"
servers:
  - url: https://api.skyfire.xyz
components:
  schemas:
    EthNetwork:
      type: string
      enum:
        - polygon_testnet
        - polygon_mainnet
        - polygon_hardhat_mainnet
        - eth_mainnet
        - eth_goerli
        - eth_hardhat_mainnet
    ErrorCode:
      enum:
        - BAD_REQUEST
        - NOT_AUTHORIZED
        - NOT_ELIGIBLE
        - GIVEAWAY_NOT_ELIGIBLE
        - NOT_FOUND
        - NOT_ACCEPTABLE
        - UNPROCESSABLE_ERROR
        - WEB7_ERROR
        - VALIDATION_ERROR
        - SERVER_ERROR
        - PAYMENT_ERROR
        - PAYMENT_FAILED
        - HIGH_NETWORK_FEE
      type: string
    Record_string.unknown_:
      properties: {}
      additionalProperties: {}
      type: object
      description: Construct a type with a set of properties K of type T
    ErrorResponse:
      description: API response format
      properties:
        code:
          "$ref": "#/components/schemas/ErrorCode"
        message:
          type: string
        details:
          "$ref": "#/components/schemas/Record_string.unknown_"
      required:
        - code
        - message
      type: object
      additionalProperties: false
    WalletBalance:
      properties:
        native:
          properties:
            balance:
              type: string
          required:
            - balance
          type: object
        claims:
          properties:
            sent:
              type: string
            received:
              type: string
          required:
            - sent
            - received
          type: object
        escrow:
          properties:
            total:
              type: string
            available:
              type: string
            allowance:
              type: string
          required:
            - total
            - available
            - allowance
          type: object
        onchain:
          properties:
            total:
              type: string
          required:
            - total
          type: object
      required:
        - native
        - claims
        - escrow
        - onchain
      type: object
    Claim:
      properties:
        id:
          type: string
        createdAt:
          type: string
        currency:
          type: string
        value:
          type: string
        sourceName:
          type: string
        destinationName:
          type: string
        sourceAddress:
          type: string
        destinationAddress:
          type: string
        network:
          "$ref": "#/components/schemas/EthNetwork"
        nonce:
          type: number
          format: double
        signature:
          type: string
        referenceId:
          type: string
        status:
          type: string
        updatedAt:
          type: string
        txHash:
          type: string
      required:
        - id
        - currency
        - value
        - sourceAddress
        - destinationAddress
        - network
        - nonce
        - signature
        - status
      type: object
      additionalProperties: false
    Redemption:
      description: Represents a redemption object.
      properties:
        redemptionId:
          type: string
          description: The unique identifier of the redemption.
        sourceAddress:
          type: string
          description: The address from which the funds will be redeemed.
        destinationAddress:
          type: string
          description: The address to which the funds will be sent.
        sourceName:
          type: string
          description: The name of the source.
        destinationName:
          type: string
          description: The name of the destination.
        network:
          "$ref": "#/components/schemas/EthNetwork"
          description: The network of the redemption.
        createdAt:
          type: string
          description: The date and time when the wallet was created.
        summary:
          properties:
            receiverTotal:
              type: string
              description: The total amount of the redemption.
            value:
              type: string
              description: The subtotal amount of the redemption.
            fee:
              type: string
              description: The fee for the redemption.
          type: object
          description: The summary associated with the redemption.
        claims:
          items:
            "$ref": "#/components/schemas/Claim"
          type: array
          description: Claims associated with the redemption.
      required:
        - redemptionId
        - sourceAddress
        - destinationAddress
        - network
        - createdAt
        - claims
      type: object
      additionalProperties: false
    Fees:
      description: Represents the fees associated with a transaction.
      properties:
        gasUsed:
          type: string
          description: The amount of gas used in the transaction.
        gasPrice:
          type: string
          description: The price of gas at the time of the transaction.
        usdConversion:
          type: string
          description: The conversion rate to USD at the time of the transaction.
        usd:
          type: number
          format: double
          description: The equivalent USD value of the transaction fees.
      type: object
      additionalProperties: false
    Transaction:
      description: Represents a transaction object.
      properties:
        id:
          type: string
          description: The unique identifier of the transaction.
        status:
          type: string
          description: The status of the transaction.
        createdAt:
          type: string
          description: The date and time when the transaction was created.
        type:
          type: string
          description: The type of the transaction.
        txId:
          type: string
          description: The transaction ID.
        txType:
          type: string
          description: The type of the transaction.
        txHash:
          type: string
          description: The hash of the transaction.
        redemption:
          "$ref": "#/components/schemas/Redemption"
          description: The redemption details associated with the transaction.
        redemptionId:
          type: string
          description: The identifier for the redemption associated with the transaction.
        fees:
          "$ref": "#/components/schemas/Fees"
          description: The fees associated with the transaction.
        claim:
          "$ref": "#/components/schemas/Claim"
          description: The claim details associated with the transaction.
        claimId:
          type: string
          description: The identifier for the claim associated with the transaction.
      required:
        - id
        - status
        - createdAt
        - type
      type: object
      additionalProperties: false
    PaginationMeta:
      properties:
        totalPages:
          type: number
          format: double
        limit:
          type: number
          format: double
      required:
        - totalPages
        - limit
      type: object
      additionalProperties: false
    TransactionsResponse:
      description: Represents the response containing a list of transactions.
      properties:
        transactions:
          items:
            "$ref": "#/components/schemas/Transaction"
          type: array
          description: An array of transaction objects.
        pagination:
          "$ref": "#/components/schemas/PaginationMeta"
          description: Metadata for pagination.
      required:
        - transactions
      type: object
      additionalProperties: false
    RedemptionsResponse:
      description: Represents the response containing a list of transactions.
      properties:
        redemptions:
          items:
            "$ref": "#/components/schemas/Redemption"
          type: array
          description: An array of transaction objects.
        pagination:
          "$ref": "#/components/schemas/PaginationMeta"
          description: Metadata for pagination.
      required:
        - redemptions
      type: object
      additionalProperties: false
    ClaimsResponse:
      description: Represents the response containing a list of claims.
      properties:
        claims:
          items:
            "$ref": "#/components/schemas/Claim"
          type: array
          description: An array of claim objects.
        pagination:
          "$ref": "#/components/schemas/PaginationMeta"
          description: Metadata for pagination.
      required:
        - claims
      type: object
      additionalProperties: false
    PaymentPayload:
      description: Represents the payload for a payment transaction.
      properties:
        status:
          type: string
          description: The status of the payment.
        sourceName:
          type: string
          description: The name of the payment source.
        sourceAddress:
          type: string
          description: The address of the payment source.
        destinationName:
          type: string
          description: The name of the payment destination.
        destinationAddress:
          type: string
          description: The address of the payment destination.
        amount:
          type: string
          description: |-
            The amount of the token used for the payment.
            This is a string representation of the amount in the smallest unit of the token (e.g., wei for Ethereum). Use the `displayAmount` field for user-friendly display.
        baseAmount:
          type: string
          description: |-
            This is a string representation of the amount in the token's base unit.
            For example, if the token has 18 decimal places, this would be the amount divided by 10^18.
            Together with the `currency` field, this can be used to display the payment amount in a user-friendly format. IE "10.00 USDC".
        currency:
          type: string
          enum:
            - USDC
            - MATIC
          description:
            The currency of the payment. Supported values are 'USDC' or
            'MATIC'.
        generatedDate:
          type: string
          format: date-time
          description: The date when the payment was generated.
        message:
          type: string
          description: An optional message or note associated with the payment.
      required:
        - sourceAddress
        - destinationAddress
        - amount
      type: object
      additionalProperties: false
    APINinjaWeatherResponse:
      properties:
        wind_speed:
          type: number
          format: double
          description: The wind speed in meters per second.
        wind_degrees:
          type: number
          format: double
          description: The wind direction in degrees.
        temp:
          type: number
          format: double
          description: The temperature in Celsius.
        humidity:
          type: number
          format: double
          description: The humidity percentage.
        sunset:
          type: number
          format: double
          description: The UNIX timestamp of the sunset time.
        min_temp:
          type: number
          format: double
          description: The minimum temperature in Celsius.
        cloud_pct:
          type: number
          format: double
          description: The cloud coverage percentage.
        feels_like:
          type: number
          format: double
          description: The "feels like" temperature in Celsius.
        sunrise:
          type: number
          format: double
          description: The UNIX timestamp of the sunrise time.
        max_temp:
          type: number
          format: double
          description: The maximum temperature in Celsius.
        payment:
          "$ref": "#/components/schemas/PaymentPayload"
          description: The payment details associated with the response.
      required:
        - wind_speed
        - wind_degrees
        - temp
        - humidity
        - sunset
        - min_temp
        - cloud_pct
        - feels_like
        - sunrise
        - max_temp
      type: object
      additionalProperties: false
    APINinjaWeatherParams:
      properties:
        lat:
          type: number
          format: double
          description: Latitude of the desired location.
        lon:
          type: number
          format: double
          description: Longitude of the desired location.
      required:
        - lat
        - lon
      type: object
      additionalProperties: false
    APINinjaStockResponse:
      properties:
        ticker:
          type: string
          description: Stock ticker symbol (e.g., AAPL).
        name:
          type: string
          description: The full name of the company (e.g., Apple Inc.).
        price:
          type: number
          format: double
          description: The current stock price.
        exchange:
          type: string
          description: The stock exchange where the stock is listed (e.g., NASDAQ).
        updated:
          type: number
          format: double
          description:
            The last update time of the stock information, in Unix timestamp
            format.
        payment:
          "$ref": "#/components/schemas/PaymentPayload"
          description: The payment details associated with the response.
      required:
        - ticker
        - name
        - price
        - exchange
        - updated
      type: object
      additionalProperties: false
    APINinjaStockParams:
      properties:
        ticker:
          type: string
          description: Stock ticker symbol (e.g. AAPL).
      required:
        - ticker
      type: object
      additionalProperties: false
    APINinjaIPLookupResponse:
      description: Represents the response from an IP Lookup request.
      properties:
        address:
          type: string
          description: The IP address of the query.
        timezone:
          type: string
          description: The time zone related to the IP address.
        region:
          type: string
          description:
            The region name where the IP address is located. In the United
            States, this is equivalent to the state.
        region_code:
          type: string
          description:
            The region code of the IP address location. In the United States,
            this is equivalent to the 2-letter state abbreviation.
        country:
          type: string
          description: The name of the country where the IP address is located.
        country_code:
          type: string
          description: The 2-letter country code of the IP address location.
        is_valid:
          type: boolean
          description: The validity status of the IP address.
        payment:
          "$ref": "#/components/schemas/PaymentPayload"
          description: The payment details associated with the response.
      required:
        - address
        - timezone
        - region
        - region_code
        - country
        - country_code
        - is_valid
      type: object
      additionalProperties: false
    APINinjaIPLookupParams:
      description: Represents the parameters for an IP Lookup request.
      properties:
        address:
          type: string
          description: IP Address to query. Must be in the format A.B.C.D.
          example: 73.9.149.180
      required:
        - address
      type: object
      additionalProperties: false
    APINinjaDNSRecord:
      description: Represents a DNS record in the DNS Lookup response.
      properties:
        record_type:
          type: string
          enum:
            - NS
            - PTR
            - SRV
            - SOA
            - CAA
          description: The type of DNS record.
        value:
          type: string
          description: The value of the DNS record.
        priority:
          type: number
          format: double
          description: The priority of the DNS record (for SRV records).
        mname:
          type: string
          description: The master name server for the zone (for SOA records).
        rname:
          type: string
          description:
            The email address of the administrator responsible for the
            zone (for SOA records).
        serial:
          type: number
          format: double
          description: The serial number for the zone (for SOA records).
        refresh:
          type: number
          format: double
          description: The refresh interval for secondary name servers (for SOA records).
        retry:
          type: number
          format: double
          description: The retry interval for secondary name servers (for SOA records).
        expire:
          type: number
          format: double
          description: The expiration time for secondary name servers (for SOA records).
        ttl:
          type: number
          format: double
          description: The minimum TTL for negative caching (for SOA records).
      required:
        - record_type
      type: object
      additionalProperties: false
    APINinjaDNSLookupResponse:
      description: Represents the response from a DNS Lookup request.
      properties:
        records:
          items:
            "$ref": "#/components/schemas/APINinjaDNSRecord"
          type: array
          description: An array of DNS records associated with the domain.
        payment:
          "$ref": "#/components/schemas/PaymentPayload"
          description: The payment details associated with the response.
      required:
        - records
      type: object
      additionalProperties: false
    APINinjaDNSLookupParams:
      description: Represents the parameters for a Web Scraper request.
      properties:
        url:
          type: string
          description: URL to scrape.
          example: https://example.com
        text_only:
          type: boolean
          description:
            Whether to only extract visible text (ignores HTML tags and
            metadata).
          default: false
        user_agent:
          type: string
          description: User-Agent string to use in the request header.
      required:
        - url
      type: object
      additionalProperties: false
    APINinjaCryptoPriceResponse:
      description: Represents the response from a Crypto Price request.
      properties:
        symbol:
          type: string
          description: The cryptocurrency symbol.
        price:
          type: string
          description: The current price of the cryptocurrency.
        timestamp:
          type: number
          format: double
          description: The timestamp of the price data (UNIX timestamp in seconds).
        payment:
          "$ref": "#/components/schemas/PaymentPayload"
          description: The payment details associated with the response.
      required:
        - symbol
        - price
        - timestamp
      type: object
      additionalProperties: false
    APINinjaCryptoPriceParams:
      description: Represents the parameters for a Crypto Price request.
      properties:
        symbol:
          type: string
          description: Cryptocurrency symbol.
          example: BTCUSDC
      required:
        - symbol
      type: object
      additionalProperties: false
    IncomeStatementsResponse:
      type: array
      items:
        type: object
        properties:
          ticker:
            type: string
            example: "<string>"
          calendar_date:
            type: string
            format: date
            example: "2023-12-25"
          report_period:
            type: string
            format: date
            example: "2023-12-25"
          period:
            type: string
            example: quarterly
          revenue:
            type: number
            example: 123
          cost_of_revenue:
            type: number
            example: 123
          gross_profit:
            type: number
            example: 123
          operating_expense:
            type: number
            example: 123
          selling_general_and_administrative_expenses:
            type: number
            example: 123
          research_and_development:
            type: number
            example: 123
          operating_income:
            type: number
            example: 123
          interest_expense:
            type: number
            example: 123
          ebit:
            type: number
            example: 123
          income_tax_expense:
            type: number
            example: 123
          net_income_discontinued_operations:
            type: number
            example: 123
          net_income_non_controlling_interests:
            type: number
            example: 123
          net_income:
            type: number
            example: 123
          net_income_common_stock:
            type: number
            example: 123
          preferred_dividends_impact:
            type: number
            example: 123
          consolidated_income:
            type: number
            example: 123
          earnings_per_share:
            type: number
            example: 123
          earnings_per_share_diluted:
            type: number
            example: 123
          dividends_per_common_share:
            type: number
            example: 123
          weighted_average_shares:
            type: number
            example: 123
          weighted_average_shares_diluted:
            type: number
            example: 123
  securitySchemes:
    api:
      type: apiKey
      in: header
      name: skyfire-api-key
paths:
  "/v1/wallet/balance":
    get:
      operationId: GetWalletBalanceForUser
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/WalletBalance"
        "401":
          description: Wallet Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              examples:
                Example 1: {}
        "422":
          description: Validation Failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              examples:
                Example 1: {}
      description: |-
        Gets wallet balance for current user. The balance is used to find out
        how much funds are available to the user.
      summary: Get Wallet Balance
      tags:
        - Wallet Management
      security:
        - api: []
      parameters: []
  "/v1/wallet/transactions":
    get:
      operationId: GetTransactionsForUser
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/TransactionsResponse"
        "401":
          description: Chat Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              examples:
                Example 1: {}
        "422":
          description: Validation Failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              examples:
                Example 1: {}
      description: Get payment and claim transactions for current user.
      summary: Get Wallet Transactions
      tags:
        - Wallet Management
      security:
        - api: []
      parameters: []
  "/v1/wallet/redemptions":
    get:
      operationId: GetRedemptionsForUser
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/RedemptionsResponse"
        "401":
          description: Chat Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              examples:
                Example 1: {}
        "422":
          description: Validation Failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              examples:
                Example 1: {}
      description: Get redemptions information for current user
      summary: Get Wallet Redemptions
      tags:
        - Wallet Management
      security:
        - api: []
      parameters: []
  "/v1/wallet/claims":
    get:
      operationId: GetClaimsForUser
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ClaimsResponse"
        "401":
          description: Wallet Error
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              examples:
                Example 1: {}
        "422":
          description: Validation Failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
              examples:
                Example 1: {}
      description:
        Get all claims made by the current user. This is for receiver wallets
        and lists the current pending claims to be redeemed.
      summary: Get Wallet Claims
      tags:
        - Wallet Management
      security:
        - api: []
      parameters: []
  "/v1/receivers/api-toolkit/weather":
    get:
      operationId: ApiWeather
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/APINinjaWeatherResponse"
      description:
        The Weather API provides the latest weather information for any
        geographic location in the world.
      summary: Weather
      tags:
        - API Ninja
      security:
        - api: []
      parameters:
        - description: Latitude of the desired location.
          in: query
          name: lat
          required: true
          schema:
            format: double
            type: number
        - description: Longitude of the desired location.
          in: query
          name: lon
          required: true
          schema:
            format: double
            type: number
  "/v1/receivers/api-toolkit/stockprice":
    get:
      operationId: ApiStock
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/APINinjaStockResponse"
      description:
        The Stock Price API provides access to real-time stock market prices
        for companies in every major exchange around the world.
      tags:
        - API Ninja
      summary: Stock Price
      security:
        - api: []
      parameters:
        - description: Stock ticker symbol (e.g. AAPL).
          in: query
          name: ticker
          required: true
          schema:
            type: string
  "/v1/receivers/api-toolkit/iplookup":
    get:
      operationId: ApiIPLookup
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/APINinjaIPLookupResponse"
      description:
        The IP Lookup API provides location information for any valid IP
        address.
      tags:
        - API Ninja
      summary: IP Lookup
      security:
        - api: []
      parameters:
        - description: IP Address to query. Must be in the format A.B.C.D.
          in: query
          name: address
          required: true
          schema:
            type: string
          example: 73.9.149.180
  "/v1/receivers/api-toolkit/dnslookup":
    get:
      operationId: ApiDNSLookup
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/APINinjaDNSLookupResponse"
      description: The DNS Lookup API retrieves DNS records for any given domain.
      summary: DNS Lookup
      tags:
        - API Ninja
      security:
        - api: []
      parameters:
        - description: Valid domain to check (e.g. example.com).
          in: query
          name: domain
          required: true
          schema:
            type: string
          example: example.com
  "/v1/receivers/api-toolkit/cryptoprice":
    get:
      operationId: ApiCryptoPrice
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/APINinjaCryptoPriceResponse"
      description:
        The Crypto Price API provides access to live market prices for
        several hundred different cryptocurrencies.
      summary: Crypto Price
      tags:
        - API Ninja
      security:
        - api: []
      parameters:
        - description: Cryptocurrency symbol.
          in: query
          name: symbol
          required: true
          schema:
            type: string
          example: LTCBTC
  "/proxy/financial-datasets-ai/financials/income-statements":
    get:
      summary: Income Statements
      description: ""
      operationId: income-statements
      tags:
        - Financial Datasets AI
      security:
        - api: []
      parameters:
        - name: ticker
          in: query
          description: Ticker name
          required: true
          schema:
            type: string
            default: GOOGL
        - name: period
          in: query
          description: '["annual","quarterly","ttm"]'
          required: true
          schema:
            type: string
            default: annual
        - name: limit
          in: query
          description: Number of statements to return
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/IncomeStatementsResponse"
        "400":
          description: "400"
          content:
            application/json:
              examples:
                Result:
                  value: "{}"
              schema:
                type: object
                properties: {}
      deprecated: false
  "/proxy/financial-datasets-ai/financials/balance-sheets":
    get:
      summary: Balance Sheets
      description: ""
      operationId: balance-sheets
      tags:
        - Financial Datasets AI
      security:
        - api: []
      parameters:
        - name: ticker
          in: query
          required: true
          schema:
            type: string
            default: GOOGL
        - name: period
          in: query
          description: '["annual","quarterly","ttm"]'
          schema:
            type: string
            default: annual
        - name: limit
          in: query
          description: Number of balance sheets to return
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: "200"
          content:
            application/json:
              examples:
                Result:
                  value: "{}"
              schema:
                type: object
                properties: {}
        "400":
          description: "400"
          content:
            application/json:
              examples:
                Result:
                  value: "{}"
              schema:
                type: object
                properties: {}
      deprecated: false
  "/proxy/financial-datasets-ai/financials/cash-flow-statements":
    get:
      summary: Cash Flow Statements
      description: ""
      operationId: cash-flow-statements
      security:
        - api: []
      tags:
        - Financial Datasets AI
      parameters:
        - name: ticker
          in: query
          required: true
          schema:
            type: string
            default: GOOGL
        - name: period
          in: query
          description: '["annual","quarterly","ttm"]'
          required: true
          schema:
            type: string
            default: annual
        - name: limit
          in: query
          description: Number of statements to return
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        "200":
          description: "200"
          content:
            application/json:
              examples:
                Result:
                  value: "{}"
              schema:
                type: object
                properties: {}
        "400":
          description: "400"
          content:
            application/json:
              examples:
                Result:
                  value: "{}"
              schema:
                type: object
                properties: {}
      deprecated: false
